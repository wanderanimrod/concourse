// Code generated by counterfeiter. DO NOT EDIT.
package volumefakes

import (
	"sync"

	"github.com/concourse/concourse/worker/baggageclaim/volume"
)

type FakeLockManager struct {
	LockStub        func(string)
	lockMutex       sync.RWMutex
	lockArgsForCall []struct {
		arg1 string
	}
	UnlockStub        func(string)
	unlockMutex       sync.RWMutex
	unlockArgsForCall []struct {
		arg1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeLockManager) Lock(arg1 string) {
	fake.lockMutex.Lock()
	fake.lockArgsForCall = append(fake.lockArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.LockStub
	fake.recordInvocation("Lock", []interface{}{arg1})
	fake.lockMutex.Unlock()
	if stub != nil {
		fake.LockStub(arg1)
	}
}

func (fake *FakeLockManager) LockCallCount() int {
	fake.lockMutex.RLock()
	defer fake.lockMutex.RUnlock()
	return len(fake.lockArgsForCall)
}

func (fake *FakeLockManager) LockCalls(stub func(string)) {
	fake.lockMutex.Lock()
	defer fake.lockMutex.Unlock()
	fake.LockStub = stub
}

func (fake *FakeLockManager) LockArgsForCall(i int) string {
	fake.lockMutex.RLock()
	defer fake.lockMutex.RUnlock()
	argsForCall := fake.lockArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeLockManager) Unlock(arg1 string) {
	fake.unlockMutex.Lock()
	fake.unlockArgsForCall = append(fake.unlockArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.UnlockStub
	fake.recordInvocation("Unlock", []interface{}{arg1})
	fake.unlockMutex.Unlock()
	if stub != nil {
		fake.UnlockStub(arg1)
	}
}

func (fake *FakeLockManager) UnlockCallCount() int {
	fake.unlockMutex.RLock()
	defer fake.unlockMutex.RUnlock()
	return len(fake.unlockArgsForCall)
}

func (fake *FakeLockManager) UnlockCalls(stub func(string)) {
	fake.unlockMutex.Lock()
	defer fake.unlockMutex.Unlock()
	fake.UnlockStub = stub
}

func (fake *FakeLockManager) UnlockArgsForCall(i int) string {
	fake.unlockMutex.RLock()
	defer fake.unlockMutex.RUnlock()
	argsForCall := fake.unlockArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeLockManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.lockMutex.RLock()
	defer fake.lockMutex.RUnlock()
	fake.unlockMutex.RLock()
	defer fake.unlockMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeLockManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ volume.LockManager = new(FakeLockManager)
