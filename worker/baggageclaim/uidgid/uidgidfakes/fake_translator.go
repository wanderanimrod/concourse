// Code generated by counterfeiter. DO NOT EDIT.
package uidgidfakes

import (
	"io/fs"
	"os/exec"
	"sync"

	"github.com/concourse/concourse/worker/baggageclaim/uidgid"
)

type FakeTranslator struct {
	TranslateCommandStub        func(*exec.Cmd)
	translateCommandMutex       sync.RWMutex
	translateCommandArgsForCall []struct {
		arg1 *exec.Cmd
	}
	TranslatePathStub        func(string, fs.FileInfo, error) error
	translatePathMutex       sync.RWMutex
	translatePathArgsForCall []struct {
		arg1 string
		arg2 fs.FileInfo
		arg3 error
	}
	translatePathReturns struct {
		result1 error
	}
	translatePathReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTranslator) TranslateCommand(arg1 *exec.Cmd) {
	fake.translateCommandMutex.Lock()
	fake.translateCommandArgsForCall = append(fake.translateCommandArgsForCall, struct {
		arg1 *exec.Cmd
	}{arg1})
	stub := fake.TranslateCommandStub
	fake.recordInvocation("TranslateCommand", []interface{}{arg1})
	fake.translateCommandMutex.Unlock()
	if stub != nil {
		fake.TranslateCommandStub(arg1)
	}
}

func (fake *FakeTranslator) TranslateCommandCallCount() int {
	fake.translateCommandMutex.RLock()
	defer fake.translateCommandMutex.RUnlock()
	return len(fake.translateCommandArgsForCall)
}

func (fake *FakeTranslator) TranslateCommandCalls(stub func(*exec.Cmd)) {
	fake.translateCommandMutex.Lock()
	defer fake.translateCommandMutex.Unlock()
	fake.TranslateCommandStub = stub
}

func (fake *FakeTranslator) TranslateCommandArgsForCall(i int) *exec.Cmd {
	fake.translateCommandMutex.RLock()
	defer fake.translateCommandMutex.RUnlock()
	argsForCall := fake.translateCommandArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTranslator) TranslatePath(arg1 string, arg2 fs.FileInfo, arg3 error) error {
	fake.translatePathMutex.Lock()
	ret, specificReturn := fake.translatePathReturnsOnCall[len(fake.translatePathArgsForCall)]
	fake.translatePathArgsForCall = append(fake.translatePathArgsForCall, struct {
		arg1 string
		arg2 fs.FileInfo
		arg3 error
	}{arg1, arg2, arg3})
	stub := fake.TranslatePathStub
	fakeReturns := fake.translatePathReturns
	fake.recordInvocation("TranslatePath", []interface{}{arg1, arg2, arg3})
	fake.translatePathMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTranslator) TranslatePathCallCount() int {
	fake.translatePathMutex.RLock()
	defer fake.translatePathMutex.RUnlock()
	return len(fake.translatePathArgsForCall)
}

func (fake *FakeTranslator) TranslatePathCalls(stub func(string, fs.FileInfo, error) error) {
	fake.translatePathMutex.Lock()
	defer fake.translatePathMutex.Unlock()
	fake.TranslatePathStub = stub
}

func (fake *FakeTranslator) TranslatePathArgsForCall(i int) (string, fs.FileInfo, error) {
	fake.translatePathMutex.RLock()
	defer fake.translatePathMutex.RUnlock()
	argsForCall := fake.translatePathArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeTranslator) TranslatePathReturns(result1 error) {
	fake.translatePathMutex.Lock()
	defer fake.translatePathMutex.Unlock()
	fake.TranslatePathStub = nil
	fake.translatePathReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeTranslator) TranslatePathReturnsOnCall(i int, result1 error) {
	fake.translatePathMutex.Lock()
	defer fake.translatePathMutex.Unlock()
	fake.TranslatePathStub = nil
	if fake.translatePathReturnsOnCall == nil {
		fake.translatePathReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.translatePathReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeTranslator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.translateCommandMutex.RLock()
	defer fake.translateCommandMutex.RUnlock()
	fake.translatePathMutex.RLock()
	defer fake.translatePathMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTranslator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ uidgid.Translator = new(FakeTranslator)
